NOTE: update coming after adding stoking flag!
#----------------------------------------------------------
#adds a Power Level P5 that is fully configurable while in ECO2 mode.
#adds echo of actual display messages and status via MCU UART monitoring
#
#These mods will turn down the heat slightly during idle mode so the stove goes thru fewer
#on/off cycles and just maintains a lower heat setting
#so the room just cools slightly.  when room cools, ECO2 mode will kick back to "Heating" which
#turns off this new power level, then once the room temp is +2F above set temp, stove
#goes into "Idle" mode and new P5 is active again.  The cycle repeats and the stove stays lit.
#Requires MCU and Display board simple mod.  See discussions for complete details
#
substitutions:
  device_name: "dev-wood-pellet-stove"
  device_description: dev Wood Pellet Stove running ESPHome
  friendly_name: dev Wood Pellet Stove
  location: dev
#----------------------------------------------------------
#Pin Mappins of unused but repurposed tywe1s gpio pins
#DONT USE GPIO0 or 2
# XX GPIO0 D3 DONT USE
# XX GPIO2 D4 DONT USE
# GPIO3 = RX label - UART rx from control board 
# GPIO4 D2 Hopper Pellet level echo pin
# GPIO5 D1 Hopper Pellet level trigger pin
# GPIO12 D6 Auger signal sensor from MCU - yellow
# GPIO13 TUYAMCU RX
# GPIO14 D5 LED & to Auger Motor opto isolator - red
# GPIO15 TUYAMCU TX
# GPIO16 D0 LED indicator that P5 is active - green
# GPIO1 (DOESNT EXIST) HEARTBEAT
external_components:
  - source: github://pr#4032
    components: tuya
    refresh: 0s
ota:
#web_server:
#  port: 80
captive_portal:  
wifi:
  ssid: "Van Slyke"
  password: "Wine4You"
  power_save_mode: none
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${location}-Wood-Pellet-Stove"
    password: "Wine4You"
#
logger:
  level: debug
  baud_rate: 0
#
# define 2 UARTS, 1 for TYWE1S, other for MCU control board/display monitoring
#
uart: 
#from MCU control board
  - id: mcu_uart_bus
    rx_pin: GPIO3 #D7 to rx pin on mcu board
    baud_rate: 2400
    rx_buffer_size: 80
    debug:
      direction: RX
      dummy_receiver: true
      after:
        delimiter: [0xCC, 0x33]
      sequence:
        - lambda: |-
            UARTDebug::log_hex(direction, bytes, ' ');  
            //Still log the data     
            //Some packets have 5 bytes  
            //might have to make this 3 if delimitar bytes get removed....
            if (bytes.size()==5) {
                if(bytes[0]==0xAA && bytes[1]==0x00) {
                //id(MCUrawString).publish_state("Heartbeat");
                //4B heartbeat, ignore
                if(bytes[2]==0x20)
                  id(MCUrawString).publish_state("Welcome to use");    
                if(bytes[2]==0x6A)
                  id(MCUrawString).publish_state("Goodbye!");              
                if(bytes[2]==0x69)
                  id(MCUrawString).publish_state("Cleaning");
                if(bytes[2]==0x63)
                  id(MCUrawString).publish_state("Cleaning");
                if(bytes[2]==0x65)
                  id(MCUrawString).publish_state("Lighting");
                if(bytes[2]==0x66)
                  id(MCUrawString).publish_state("Stabilization");
                if(bytes[2]==0x67)
                  id(MCUrawString).publish_state("Stabilization");
                if(bytes[2]==0x62)
                  id(MCUrawString).publish_state("Switching OFF");
                if(bytes[2]==0x69)
                  id(MCUrawString).publish_state("Cooling");                
              }              
            }
            //Some packets have 6 bytes
            if (bytes.size()==6) {
              if(bytes[1]==0x01 && bytes[2]==0x46 && bytes[3]==0x02) 
                id(MCUrawString).publish_state("Welcome to use"); 
              if(bytes[1]==0x01 && bytes[2]==0x49 && bytes[3]==0x80) 
                id(MCUrawString).publish_state("Stabilization"); 
              if(bytes[1]==0x01 && bytes[2]==0x49 && bytes[3]==0x81) 
                id(MCUrawString).publish_state("ECO2"); 
              if(bytes[1]==0x01 && bytes[2]==0x48 && bytes[3]==0x80) 
                id(MCUrawString).publish_state("ECO1"); 
              if(bytes[1]==0x01 && bytes[2]==0x48 && bytes[3]==0xC0) 
                id(MCUrawString).publish_state("Idling - ECO2"); 
              if(bytes[1]==0x01 && bytes[2]==0x48 && bytes[3]==0x83) 
                id(MCUrawString).publish_state("ECO1"); 
              if(bytes[1]==0x01 && bytes[2]==0x48 && bytes[3]==0xC3) 
                id(MCUrawString).publish_state("ECO2"); 
              if(bytes[1]==0x01 && bytes[2]==0x49 && bytes[3]==0x81) 
                id(MCUrawString).publish_state("Idling - ECO2");  
              if(bytes[1]==0x01 && bytes[2]==0x49 && bytes[3]==0x00) 
                id(MCUrawString).publish_state("Switching off");               
            }
#communication from MCU to tywe1s chip
  - id: tywe1s_uart
    rx_pin: GPIO13
    tx_pin: GPIO15
    baud_rate: 9600
#
globals:
  - id: heartbeat_flag
    type: bool
    initial_value: "true"
  - id: auger_count
    type: int
    restore_value: no
    initial_value: '0'
#
esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: esp01_1m
  on_shutdown: 
    priority: 1000
    then:
    - switch.turn_off: auger_output_to_optoisolator
  on_boot:
    priority: -100
    then:
      - switch.turn_off: auger_output_to_optoisolator
      - delay: 30s
      - logger.log: "on_boot.30s delay over, STARTING UP"
      - script.execute: heartbeat_timer
      - switch.turn_off: auger_output_to_optoisolator
      - script.execute: new_auger_motor_power_level
      - globals.set:
          id: heartbeat_flag
          value: 'false'   
      - if:
          condition: 
            - binary_sensor.is_on: p5z
          then:
            - switch.turn_on: p5_indicator
          else:  
            - switch.turn_off: p5_indicator
api:
  reboot_timeout: 0s # disabled. 
#
script:
  - id: heartbeat_timer
    mode: restart
    then:
      - logger.log: "script.heartbeat.timer STARTING"
      - if:
          condition:
            and:
              - lambda: 'return !id(heartbeat_flag);'
              - lambda: 'return id(error_code).state == 0;' # only if no errors
          then:
            - logger.log: "*****Heartbeat missed, flag not set NO AUGER *****"
            - delay: 20s
            - if:
                condition:
                  - lambda: 'return !id(heartbeat_flag);'
                then:
                 - button.press: restart_esp
          else:  
            - delay: !lambda "return (id(auger_on_timez).state * 1000) + (id(auger_on_timez).state * 10000) + 10000;"
            - globals.set:
                id: heartbeat_flag
                value: 'false'
# New P5 Power level Auger motor control      
  - id: new_auger_motor_power_level
    mode: single
    then:
    - logger.log: "1script.new_auger_motor_power_level.STARTING"
#Main loop       
    - while:
        condition:
          - text_sensor.state: #Stove is idling in ECO2 mode
              id: hvac_action
              state: 'idle'
#          - lambda: return id(MCUrawString).state == "Idling - ECO2";
          - binary_sensor.is_on: p5z #NOT In power level 5
        #   and:
        #     #make sure auger is supposed to be turning and has set the heartbeat flag
        #   - lambda: return id(heartbeat_flag); 
        #   - lambda: return id(stove_on);  #make sure stove is on
        #   - binary_sensor.is_on: p5z #P5 power level is on
        then:      
#new P5 Auger routine             
          - switch.turn_on: auger_output_to_optoisolator    
          - logger.log: 
              format: "text_sensor.hvac_action.on_value | hvac_action= %s"
              args: ['id(hvac_action).state.c_str()']
          - delay: !lambda "return id(auger_on_timez).state * 1000;"
          - logger.log: "6script.newP5 active. Auger ON delay completed" 
          - switch.turn_off: auger_output_to_optoisolator  
          - globals.set:
              id: heartbeat_flag
              value: 'true'   
          - delay: !lambda "return id(auger_off_timez).state * 1000;"
          - logger.log: "7script.newP5 active. Auger OFF delay completed HEARTBEAT = TRUE" 
    #ENDWHILE
#    
# Define binary sensors
#
binary_sensor:            
  - platform: template
    name: "Heartbeat"
    id: heartbeat
    lambda: |-
      if (id(heartbeat_flag) == 1) {
        return true;
      } else {
        return false;
      }
#read new P5 power mode from home assistant, toggle repurposed Timer LED on display module 
  - platform: homeassistant
    id: p5z
    entity_id: input_boolean.p5
    on_state:      
      then:
        - logger.log: "logger: P5 button changed"       
        - if:
            condition:
              - binary_sensor.is_on: p5z #p5 is  active                      
            then:
              - logger.log: "script.P5 sw = TRUE turning ON P5 indicator"
              - switch.turn_on: p5_indicator
              - script.execute: new_auger_motor_power_level                               
            else: 
              - logger.log: "script.p5z  = FALSE, turning OFF P5 indicator"            
              - switch.turn_off: p5_indicator                        
#
   #MCU CONTROL BOARD AUGER SENSOR    
  - platform: gpio
    pin: GPIO12 #    
    internal: false # this is just a flag you expose and watch in Lovelace
    id: esph_${location}_auger_sensor_from_mcu
    name: "esph ${location} Auger Sensor from MCU" #Auger signal from MCU, goes low when Auger motor is running
    filters:
      - invert #flip it
    on_state: 
      then: 
        - if: #keep track of how many auger turns happen and reset if stove lights
            condition:
              - sensor.in_range: #**** Stove pipe is COLD
                  id: stove_pipe_temp
                  below: 200.0
            then:
              - lambda: auger_count = 0;
        - logger.log: "GPIOI12.Auger.from.MCU.on_state"
  #even when in P5, set heartbeat        
        - if:
            condition:
              - binary_sensor.is_off: esph_${location}_auger_sensor_from_mcu
            then:
              - globals.set:
                  id: heartbeat_flag
                  value: 'true'
  #ECHO Auger  
        - if:
            condition:
              and:
                - binary_sensor.is_off: esph_${location}_auger_sensor_from_mcu
                - text_sensor.state: #Stove is HEATING not IDLING
                    id: hvac_action
                    state: 'heating'         
            then:
              - switch.turn_off: auger_output_to_optoisolator
        - if:
            condition:
              and:
                - binary_sensor.is_on: esph_${location}_auger_sensor_from_mcu
                - text_sensor.state: #Stove is HEATING, not IDLING
                    id: hvac_action
                    state: 'heating'    
            then:
  #ECHO Auger                    
              - switch.turn_on: auger_output_to_optoisolator  
              - lambda: id(auger_count) += 1; #keep track of how many auger turns happen and reset if stove lights
        - if:
            condition:
              and:
                - binary_sensor.is_off: p5z #NOT In power level 5
                - binary_sensor.is_on: esph_${location}_auger_sensor_from_mcu  
            then:
                - switch.turn_on: auger_output_to_optoisolator
        - if:
            condition:
              and:
                - binary_sensor.is_off: p5z #NOT In power level 5
                - binary_sensor.is_off: esph_${location}_auger_sensor_from_mcu              
            then:
              - switch.turn_off: auger_output_to_optoisolator
              - globals.set:
                  id: heartbeat_flag
                  value: 'true'              
button:
  - platform: restart #allows remote reset of tywe1s chip from home assistant or internally
    id: restart_esp
    name: "ESPH ${location} Stove Restart" 
#
# DEFINE ALL SENSORS AND SWITCHES
#
#TEXT SENSOR FOR DETECTING WHEN STOVE GOES FROM HEATING TO IDLE WHILE IN ECO2 MODE
# signal comes from MCU control board
text_sensor:
#from MCU control board
  - platform: template
    id: MCUrawString
    name: ${location}_display_text_sensor
    on_value:   # When value simply changes
      - switch.turn_off: auger_output_to_optoisolator # just to be safe
      - if:
          condition:
            and:
              - binary_sensor.is_on: p5z
 #             - lambda: return id(MCUrawString).state == "Idling - ECO2";
              - text_sensor.state: #Stove is idling in ECO2 mode
                  id: hvac_action
                  state: 'idle'
          then: 
            - script.execute: new_auger_motor_power_level         
          else: #failsafe action
            - script.stop: new_auger_motor_power_level
#
  - platform: template
    name: "Uptime (formatted)"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = dur / 86400;
      dur %= 86400;
      int hrs = dur / 3600;
      dur %= 3600;
      int mnts = dur / 60;
      dur %= 60;
      return str_sprintf("%ud %02uh %02um %02us", dys, hrs, mnts, dur);
    icon: mdi:clock-start
    update_interval: 10s
#get these object values from home assistant 
  - platform: homeassistant
    id: hvac_action
    entity_id: climate.${location}_wood_pellet_stove
#this sensor changes from HEATING to IDLE in ECO2 mode only or when we reach set temp in ECO1.  
    attribute: hvac_action
#
sensor:
  - platform: template
    name: auger count
    filters:
      - lambda: return id(auger_count);
#get these object values from home assistant 
  - platform: homeassistant
    id: auger_off_timez
    entity_id: input_number.auger_off_time
#
  - platform: homeassistant
    id: auger_on_timez
    entity_id: input_number.auger_on_time
#
#Ultrasonic Pellet level Sensor
#. https://community.home-assistant.io/t/pellet-stove-hopper-level-ultrasonic-sensor-and-thermostat-relay-esphome/292042
  - platform: ultrasonic
    trigger_pin: GPIO5 #BLUE WIRE D3
    echo_pin: GPIO4 #GREEN WIRE D2
    name: "esph ${location} pellet level in percent"
    update_interval: 60s
# Optional variables:
    icon: "mdi:sack-percent"
    accuracy_decimals: 0      
    filters:
    # Calculates in %
    # Replace 0.46 by the height of hopper. From the sensor to the bottom.
    # I used this website to know how I should multiply my values :https://www.skillsyouneed.com/num/percent-change.html 
    - lambda: return (0.46-x)*(100/0.46);
    unit_of_measurement: "%"
#
  - platform: "tuya"
    name: "ESPH ${location} Stove-Power On"
    id: stove_on
    sensor_datapoint: 1
  - platform: "tuya"
    name: "ESPH ${location} Stove-Error Code"
    id: error_code
    sensor_datapoint: 104
  - platform: "tuya"
    name: "ESPH ${location} Stove-Power Mode"
    sensor_datapoint: 4
  - platform: "tuya"
    name: "ESPH ${location} Stove-Set Temp"
    sensor_datapoint: 106
  - platform: "tuya"
    name: "ESPH ${location} Stove-Current Temp"
    sensor_datapoint: 107
  - platform: "tuya"
    name: "ESPH ${location} Stove-Pipe Temp"
    id: stove_pipe_temp
    sensor_datapoint: 108
  - platform: "tuya"
    name: "ESPH ${location} Stove-Protect Temp"
    sensor_datapoint: 109
#more utility sensors
  - platform: uptime
    internal: false
    name: ${friendly_name} Uptime
    id: uptime_s
    update_interval: 10s
#
#DEFINE SELECTS
#
select:
  - platform: "tuya"
    tuya_id: "${location}"
    name: "ESPH ${location} Power Select"
    enum_datapoint: 4
    options:
      0: P1-High
      1: P2-Med High
      2: P3-Med Low
      3: P4-Low      
  - platform: "tuya"
    tuya_id: "${location}"
    name: "ESPH ${location} ECO Select"
    id: eco_mode
    enum_datapoint: 101
    options:
      0: ECO1 - Heat then OFF
      1: ECO2 - Px then P4
    on_value:
      then:
        - logger.log: "select.eco_mode  ECO Mode changed"
# Data points observed in Tuya iOT platform during ${location} debug mode
# 1 - Power on (Heat)
#4 - Mode P1/P2/P3P4
#101 - ECO1/ECO2
#104 - Error Code
#105 - unused
#106 - Set Temp
#107 - Current Temp
#108 - Pipe Temp
#109 - Protect Temp
#-----------------
#Datapoint 1: switch (value: OFF)
#Datapoint 105: enum (value: 0)
#Datapoint 4: enum (value: 0)
#Datapoint 101: enum (value: 0)
#Datapoint 106: int value (value: 68)
#Datapoint 107: int value (value: 64)
#Datapoint 108: int value (value: 68)
#Datapoint 109: int value (value: 72)
#Datapoint 104: bitmask (value: 0)
#GPIO Configuration: status: pin 5, reset: pin 0
#Product: '{"p":"8Dj5zVjGqPSXaUgf","v":"1.0.0","m":0}'
#
# Register the Tuya MCU connection
tuya:
  id: "${location}"
  uart_id: tywe1s_uart
#
switch:
  - platform: safe_mode # expose this in HA just in case...
    name: "${location} Wood Pellet Stove Restart (Safe Mode)"
#This sends the Auger signal to the optoisolator to turn on the Auger motor    
  - platform: gpio
    pin: GPIO14
    name: "esph ${location} AugerOut to optoisolator +LED"
    id: auger_output_to_optoisolator
    inverted: yes
#If we miss a signal due to some failure we can reboot the chip   
#   - platform: gpio
#     pin: GPIO1
#     id: heartbeat
#     name: "${location}_auger_heartbeat"
#     on_turn_on:
#     - logger.log: 
#         format: "***HEARTBEAT flag = %d"
#         args: [ 'id(heartbeat_flag)' ]         
#     on_turn_off:
#     - logger.log: 
#         format: "***HEARTBEAT flag = %d"
#         args: [ 'id(heartbeat_flag)' ]         
 #wire the time LED on front panel to GPIO1 to indicate when new P5 level is on       
  - platform: gpio
    pin: GPIO16
    name: "esph ${location} P5 indicator LED"
    inverted: yes
    id: p5_indicator
#  - platform: "tuya"
#```
climate:
  - platform: tuya
    reports_fahrenheit: true # bug in stove requires this new flag. added 11/1/22 by ${location}s
    name: "${location} Wood Pellet Stove"
    switch_datapoint: 1
    target_temperature_datapoint: 106
    current_temperature_datapoint: 107
    # visual:
    #   min_temperature: 40
