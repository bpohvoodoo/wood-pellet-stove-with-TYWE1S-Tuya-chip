#----------------------------------------------------------
substitutions:
  device_name: "dev-wood-pellet-stove"
  device_description: dev Wood Pellet Stove running ESPHome
  friendly_name: dev Wood Pellet Stove
#----------------------------------------------------------
#external_components:
 # - source: github://pr#4032
 #   components: tuya
 #   refresh: 0s
# Enable logging
ota:
wifi:
  ssid: "yourSSID"
  password: "*****"
  power_save_mode: none
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "dev-Wood-Pellet-Stove"
    password: "Wine4You"
captive_portal:
#    
time:
  - platform: homeassistant
    id: time_homeassistant
    on_time_sync:
      - component.update: sensor_uptime_timestamp
#
logger:
  level: debug
  baud_rate: 0
uart: #communication from MCU to tywe1s chip
  rx_pin: GPIO13
  tx_pin: GPIO15
  baud_rate: 9600
#
globals:
  - id: p5flag
    type: bool
    initial_value: 'false'
    restore_value: yes
#
esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: esp01_1m
  #flash_write_interval: 10min
  #esp8266_restore_from_flash: true
  #  - flash_write_interval: 10min=
  on_boot:
    priority: -100
    then:
      - delay: 10s
      - logger.log: "on_boot.10s delay over, script.STARTING"
      - script.execute: auger_motor
api:
#let it continue to work for 5 min if home assistant goes offline or fails
  reboot_timeout: 30000ms
#
script:
  - id: auger_motor
    then:
    - logger.log: "script.STARTING"
# Main loop          
    - while:
        condition:
          and:
          - lambda: "return true;"
          - lambda: return id(stove_on);  #make sure stove is on
        then:
        - if:
            condition:
              - binary_sensor.is_on: p5z #p5 is  active
            then:
              - logger.log: "script.P5 sw = TRUE turning OFF P5 indicator"
              - switch.turn_on: p5_indicator
            else: 
              - switch.turn_off: p5_indicator           
#Just echo Auger
        - if:
            condition:
              and:
                - binary_sensor.is_off: esph_house_auger_sensor_from_mcu
                - lambda: return !id(p5flag);
            then:
              - logger.log: "script.check.p5flag | ECHOing Auger, turning OFF, P5FLAG == FALSE"
              - switch.turn_off: auger_output_to_optoisolator
        - if:
            condition:
              and:
                - binary_sensor.is_on: esph_house_auger_sensor_from_mcu
                - lambda: return !id(p5flag);                   
            then:
              - logger.log: "script.check.p5flag | ECHOing Auger, turning ON, P5FLAG == FALSE"
              - switch.turn_on: auger_output_to_optoisolator 
#new P5 Auger routine             
        - if:
            condition: 
              - lambda: return id(p5flag); #All conditions met and P5flag == true.  
            then:
              - logger.log: "script.check.p5flag | P5FLAG tests TRUE. Modified P5 running" 
              - switch.turn_on: auger_output_to_optoisolator    
              # - logger.log: 
              #     format: "text_sensor.hvac_action.on_value | hvac_action= %s"
              #     args: ['id(hvac_action).state.c_str()']
              - delay: !lambda "return id(auger_on_timez).state * 1000;"
              - logger.log: "script.newP5 active. Auger ON" 
              - switch.turn_off: auger_output_to_optoisolator  
              - delay: !lambda "return id(auger_off_timez).state * 1000;"
              - logger.log: "script.newP5 active. Auger OFF"
#RETest all P5 conditions and RESET (especially when power off or error) 
        - if:
            condition:
              and:
              - binary_sensor.is_on: p5z    
#** might want to use global p5_indicator in case binary_sensor becomes unavailaable
# - lambda: return !id(p5_indicator);
#              - lambda: return id(p5flag);
              - text_sensor.state:
                  id: hvac_action
                  state: 'idle'
              - lambda: return id(eco_mode).state == "ECO2 - Px then P4";    
              - sensor.in_range:
                  id: stove_pipe_temp
                  above: 250.0              
            then:
              - globals.set:
                  id: p5flag
                  value: '1'                 
            else:
              - globals.set:
                  id: p5flag
                  value: '0'         
        - logger.log: 
            format: "script.END STARTING AGAIN | p5flag = %d"
            args: [ 'id(p5flag)' ]         
        - delay: 0.5s # just in case of no signals we dont get a runaway condition that reboots the ESP
#
#NEW POWER LEVEL P5
#
binary_sensor:
##read new P5 power mode from home assistant, toggle repurposed Timer LED on display module 
  - platform: homeassistant
    id: p5z
    entity_id: input_boolean.p5
    on_state:      
      then:
        - logger.log: "logger: P5 button changed"       
        - if:
            condition:
              - binary_sensor.is_on: p5z #p5 is  active
            then:
              - logger.log: "script.P5 sw = TRUE turning OFF P5 indicator"
              - switch.turn_on: p5_indicator
            else: 
              - switch.turn_off: p5_indicator           

#Pin Mappins of unused but repurposed tywe1s gpio pins
#GPIO0  Hopper Pellet level trigger pin
#GPIO12 Hopper Pellet level echo pin
#GPIO14 Reset button function, hold thumbs up for 3 seconds   
#GPIO4 Auger signal sensor from MCU
#GPIO5 LED & to Auger Motor opto isolator
#GPIO1 LED inducator that P5 is active
#    
#MCU BOARD AUGER SENSOR    
  - platform: gpio
    pin: GPIO4
    id: esph_house_auger_sensor_from_mcu
    name: "esph House Auger Sensor from MCU" #Auger signal from MCU, goes low when Auger motor is running
    filters:
      - invert #flip it
    on_state:      
      then:
        - logger.log:
             format: "GPIO4.onstate | entering GPIO4 state.chg  ECO Mode = %s "
             args: ["id(eco_mode).state.c_str()"]  
#
button:
  - platform: restart #allows remote reset of tywe1s chip from home assistant 
    name: "ESPH dev Stove Restart" 
#
#TEXT SENSOR FOR DETECTING WHEN STOVE GOES FROM HEATING TO IDLE WHILE IN ECO2 MODE
text_sensor:
#get these object values from home assistant 
  - platform: homeassistant
    id: hvac_action
    entity_id: climate.dev_wood_pellet_stove
#this sensor changes from HEATING to IDLE in ECO2 mode only or when we reach set temp in ECO1.  
    attribute: hvac_action
    on_value:   # When value simply changes
      then:
        - switch.turn_off: auger_output_to_optoisolator # just to be safe
        - logger.log:
            format: "text_sensor.on_value | entering , P5FLAG = %d"
            args: [ 'id(p5flag)' ]
# DEFINE ALL SENSORS AND SWITCHES
#
sensor:
#get these object values from home assistant 
  - platform: homeassistant
    id: auger_off_timez
    entity_id: input_number.auger_off_time

  - platform: homeassistant
    id: auger_on_timez
    entity_id: input_number.auger_on_time
    
#  - platform: homeassistant
#    id: hvac_action
#    entity_id: sensor.esph_stove_hvac_action
#
#Ultrasonic Pellet level Sensor
#. https://community.home-assistant.io/t/pellet-stove-hopper-level-ultrasonic-sensor-and-thermostat-relay-esphome/292042
  - platform: ultrasonic
    trigger_pin: GPIO0
    echo_pin: GPIO12
    name: "esph House pellet level in percent"
    update_interval: 60s
# Optional variables:
    icon: "mdi:sack-percent"
    accuracy_decimals: 0      
    filters:
    # Calculates in %
    # Replace 0.46 by the height of hopper. From the sensor to the bottom.
    # I used this website to know how I should multiply my values :https://www.skillsyouneed.com/num/percent-change.html 
    - lambda: return (0.46-x)*(100/0.46);
    unit_of_measurement: "%"
#
  - platform: "tuya"
    name: "ESPH dev Stove-Power On"
    id: "stove_on"
    sensor_datapoint: 1
  - platform: "tuya"
    name: "ESPH dev Stove-Error Code"
    sensor_datapoint: 104
  - platform: "tuya"
    name: "ESPH dev Stove-Power Mode"
    sensor_datapoint: 4
  - platform: "tuya"
    name: "ESPH dev Stove-Set Temp"
    sensor_datapoint: 106
  - platform: "tuya"
    name: "ESPH dev Stove-Current Temp"
    sensor_datapoint: 107
  - platform: "tuya"
    name: "ESPH dev Stove-Pipe Temp"
    id: stove_pipe_temp
    sensor_datapoint: 108
  - platform: "tuya"
    name: "ESPH dev Stove-Protect Temp"
    sensor_datapoint: 109
#more utility sensors
  - platform: uptime
    id: sensor_uptime
  - platform: wifi_signal
    name: ${friendly_name} Signal
    update_interval: 60s    
  - platform: template
    id: sensor_uptime_timestamp
    name: "${friendly_name} Uptime"
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
      );
      return timestamp;
#
#DEFINE SELECTS
#
select:
  - platform: "tuya"
    tuya_id: "dev"
    name: "ESPH dev Power Select"
    enum_datapoint: 4
    options:
      0: P1-High
      1: P2-Med High
      2: P3-Med Low
      3: P4-Low      
  - platform: "tuya"
    tuya_id: "dev"
    name: "ESPH dev ECO Select"
    id: eco_mode
    enum_datapoint: 101
    options:
      0: ECO1 - Heat then OFF
      1: ECO2 - Px then P4
    on_value:
      then:
        - logger.log: "select.eco_mode  ECO Mode changed"
# Data points observed in Tuya iOT platform during dev debug mode
# 1 - Power on (Heat)
#4 - Mode P1/P2/P3P4
#101 - ECO1/ECO2
#104 - Error Code
#105 - unused
#106 - Set Temp
#107 - Current Temp
#108 - Pipe Temp
#109 - Protect Temp
#-----------------
#Datapoint 1: switch (value: OFF)
#Datapoint 105: enum (value: 0)
#Datapoint 4: enum (value: 0)
#Datapoint 101: enum (value: 0)
#Datapoint 106: int value (value: 68)
#Datapoint 107: int value (value: 64)
#Datapoint 108: int value (value: 68)
#Datapoint 109: int value (value: 72)
#Datapoint 104: bitmask (value: 0)
#GPIO Configuration: status: pin 5, reset: pin 0
#Product: '{"p":"8Dj5zVjGqPSXaUgf","v":"1.0.0","m":0}'

# Register the Tuya MCU connection
tuya:
  id: "dev"
switch:
  - platform: gpio
    pin: GPIO5
    name: "esph House AugerOut to optoisolator +LED"
    id: auger_output_to_optoisolator
#   
  - platform: gpio
    pin: GPIO1
    name: "esph dev P5 indicator LED"
    inverted: yes
    id: p5_indicator
#
  - platform: gpio
    pin: GPIO0
    name: "esph dev Reset Stove Display Unit"
    inverted: yes
    id: reset_stove_display
#
  - platform: "tuya"
    name: "dev Stove Power On/Off"
    switch_datapoint: 1
#```
climate:
  - platform: tuya
    reports_fahrenheit: true # bug in stove requires this new flag. added 11/1/22 by devs
    name: "dev Wood Pellet Stove"
    switch_datapoint: 1
    target_temperature_datapoint: 106
    current_temperature_datapoint: 107
    # visual:
    #   min_temperature: 40
